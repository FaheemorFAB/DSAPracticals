#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

// Stack structure
typedef struct {
    char items[MAX];
    int top;
} Stack;

// Function to initialize the stack
void initialize(Stack* s) {
    s->top = -1;
}

// Function to check if the stack is empty
int isEmpty(Stack* s) {
    return s->top == -1;
}

// Function to check if the stack is full
int isFull(Stack* s) {
    return s->top == MAX - 1;
}

// Function to push an item onto the stack
void push(Stack* s, char item) {
    if (isFull(s)) {
        printf("Stack overflow\n");
        return;
    }
    s->items[++s->top] = item;
}

// Function to pop an item from the stack
char pop(Stack* s) {
    if (isEmpty(s)) {
        printf("Stack underflow\n");
        return '\0';
    }
    return s->items[s->top--];
}

// Function to check if the given character is an opening parenthesis
int isOpeningParenthesis(char ch) {
    return ch == '(' || ch == '{' || ch == '[';
}

// Function to check if the given character is a closing parenthesis
int isClosingParenthesis(char ch) {
    return ch == ')' || ch == '}' || ch == ']';
}

// Function to check if the characters match as a pair of parentheses
int isMatchingPair(char opening, char closing) {
    return (opening == '(' && closing == ')') ||
           (opening == '{' && closing == '}') ||
           (opening == '[' && closing == ']');
}

// Function to check if the expression is balanced
int isBalanced(char* expression) {
    Stack s;
    initialize(&s);
    int i;
    for (i = 0; i < strlen(expression); i++) {
        if (isOpeningParenthesis(expression[i])) {
            push(&s, expression[i]);
        } else if (isClosingParenthesis(expression[i])) {
            if (isEmpty(&s)) {
                return 0; // Stack is empty, not balanced
            }
            char top = pop(&s);
            if (!isMatchingPair(top, expression[i])) {
                return 0; // Parentheses do not match
            }
        }
    }
    return isEmpty(&s); // If stack is empty, then balanced
}

int main() {
    char expression[MAX];
    printf("Enter an expression: ");
    gets(expression);

    if (isBalanced(expression)) {
        printf("The expression is correctly parenthesized.\n");
    } else {
        printf("The expression is not correctly parenthesized.\n");
    }

    return 0;
}
